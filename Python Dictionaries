Python Dictionaries
    thisdict = {
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }

Dictionary
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

Dictionaries are written with curly brackets, and have keys and values:
Create and print a dictionary:

    thisdict = {
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    print(thisdict)

Dictionary Items
Dictionary items are ordered, changeable, and do not allow duplicates.
Dictionary items are presented in key:value pairs, and can be referred to by using the key name.
  Example
  Print the "brand" value of the dictionary:

    thisdict = {
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    print(thisdict["brand"])

Ordered or Unordered?
As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.
Unordered means that the items do not have a defined order, you cannot refer to an item by using an index.

Change Values
You can change the value of a specific item by referring to its key name:
  Example
  Change the "year" to 2018:

    thisdict = {
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    thisdict["year"] = 2018

Update Dictionary
The update() method will update the dictionary with the items from the given argument.
The argument must be a dictionary, or an iterable object with key:value pairs.
  Example
  Update the "year" of the car by using the update() method:

    thisdict = {
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    thisdict.update({"year": 2020})



Python - Add Dictionary Items
  Adding Items
  Adding an item to the dictionary is done by using a new index key and assigning a value to it:
    Example
      thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
      }
      thisdict["color"] = "red"
      print(thisdict)

Python - Remove Dictionary Items
  Removing Items
  There are several methods to remove items from a dictionary:    
    Example
    The pop() method removes the item with the specified key name:
      thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
      }
      thisdict.pop("model")
      print(thisdict)


Python - Loop Dictionaries
  Loop Through a Dictionary
  You can loop through a dictionary by using a for loop.
  When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.
    Example
    Print all key names in the dictionary, one by one:
        for x in thisdict:
          print(x)

    Print all values in the dictionary, one by one:
        for x in thisdict:
          print(thisdict[x])

    You can also use the values() method to return values of a dictionary:
        for x in thisdict.values():
          print(x)

    You can use the keys() method to return the keys of a dictionary:
        for x in thisdict.keys():
          print(x)

    Loop through both keys and values, by using the items() method:
        for x, y in thisdict.items():
          print(x, y)



Python - Copy Dictionaries
  Copy a Dictionary
  You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.
  There are ways to make a copy, one way is to use the built-in Dictionary method copy().
    Example
    Make a copy of a dictionary with the copy() method:
        thisdict = {
          "brand": "Ford",
          "model": "Mustang",
          "year": 1964
        }
        mydict = thisdict.copy()
        print(mydict)

    Another way to make a copy is to use the built-in function dict().
    Make a copy of a dictionary with the dict() function:

        thisdict = {
          "brand": "Ford",
          "model": "Mustang",
          "year": 1964
        }
        mydict = dict(thisdict)
        print(mydict)


Python Dictionary Methods
  Dictionary Methods
  Python has a set of built-in methods that you can use on dictionaries.

        Method	                                      Description
        clear()	                                      Removes all the elements from the dictionary
        copy()	                                      Returns a copy of the dictionary
        fromkeys()	                                  Returns a dictionary with the specified keys and value
        get()	                                        Returns the value of the specified key
        items()	                                      Returns a list containing a tuple for each key value pair
        keys()	                                      Returns a list containing the dictionary's keys
        pop()	                                        Removes the element with the specified key
        popitem()	                                    Removes the last inserted key-value pair
        setdefault()	                                Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
        update()	                                    Updates the dictionary with the specified key-value pairs
        values()	                                    Returns a list of all the values in the dictionary





Exercise 1:
Use the get method to print the value of the "model" key of the car dictionary.
    car =	{
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    print(car.get("model"))


Exercise:
Change the "year" value from 1964 to 2020.
    car =	{
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    car["year"] = 2020


Exercise 3:
Add the key/value pair "color" : "red" to the car dictionary.
    car =	{
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    car["color"] = "red"


Exercise 4:
Use the pop method to remove "model" from the car dictionary.
    car =	{
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    car.pop("model")


Exercise 5:
Use the clear method to empty the car dictionary.
    car =	{
      "brand": "Ford",
      "model": "Mustang",
      "year": 1964
    }
    car.clear()

