Set
Sets are used to store multiple items in a single variable.
Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.
A set is a collection which is unordered, unchangeable*, and unindexed.

Sets are written with curly brackets.
  Example
  Create a Set:

    thisset = {"apple", "banana", "cherry"}
    print(thisset)

Set Items
  Set items are unordered, unchangeable, and do not allow duplicate values.

Unordered
  Unordered means that the items in a set do not have a defined order.
  Set items can appear in a different order every time you use them, and cannot be referred to by index or key.

Unchangeable
  Set items are unchangeable, meaning that we cannot change the items after the set has been created.

Duplicates Not Allowed
Sets cannot have two items with the same value.
  Example
  Duplicate values will be ignored:

    thisset = {"apple", "banana", "cherry", "apple"}
    print(thisset)

Add Items
Once a set is created, you cannot change its items, but you can add new items.
To add one item to a set use the add() method.
  Example
  Add an item to a set, using the add() method:

    thisset = {"apple", "banana", "cherry"}    
    thisset.add("orange")
    print(thisset)


Add Sets
To add items from another set into the current set, use the update() method.
  Example
  Add elements from tropical into thisset:

    thisset = {"apple", "banana", "cherry"}
    tropical = {"pineapple", "mango", "papaya"}
    thisset.update(tropical)    
    print(thisset)


Add Any Iterable
The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).
  Example
  Add elements of a list to at set:

    thisset = {"apple", "banana", "cherry"}
    mylist = ["kiwi", "orange"]
    thisset.update(mylist)
    print(thisset)



Loop Items
You can loop through the set items by using a for loop:
  Example
  Loop through the set, and print the values:

    thisset = {"apple", "banana", "cherry"}
    for x in thisset:
      print(x)


Join Two Sets
There are several ways to join two or more sets in Python.
You can use the union() method that returns a new set containing all items from both sets, or the update() method that inserts all the items from one set into another:
  Example 
  The union() method returns a new set with all items from both sets:

    set1 = {"a", "b" , "c"}
    set2 = {1, 2, 3}
    set3 = set1.union(set2)
    print(set3)


Set Methods
Python has a set of built-in methods that you can use on sets.

    Method	                              Description
    add()	                                Adds an element to the set
    clear()	                              Removes all the elements from the set
    copy()	                              Returns a copy of the set
    difference()	                        Returns a set containing the difference between two or more sets
    difference_update()	                  Removes the items in this set that are also included in another, specified set
    discard()	                            Remove the specified item
    intersection()	                      Returns a set, that is the intersection of two other sets
    intersection_update()	                Removes the items in this set that are not present in other, specified set(s)
    isdisjoint()	                        Returns whether two sets have a intersection or not
    issubset()	                          Returns whether another set contains this set or not
    issuperset()	                        Returns whether this set contains another set or not
    pop()	                                Removes an element from the set
    remove()	                            Removes the specified element
    symmetric_difference()	              Returns a set with the symmetric differences of two sets
    symmetric_difference_update()	        inserts the symmetric differences from this set and another
    union()	                              Return a set containing the union of sets
    update()	                            Update the set with the union of this set and others





Exercise 1:
Check if "apple" is present in the fruits set.

  fruits = {"apple", "banana", "cherry"}
  if "apple" in fruits:
    print("Yes, apple is a fruit!")



Exercise:
Use the add method to add "orange" to the fruits set.

  fruits = {"apple", "banana", "cherry"}
  fruits.add("orange")



Exercise:
Use the correct method to add multiple items (more_fruits) to the fruits set.

  fruits = {"apple", "banana", "cherry"}
  more_fruits = ["orange", "mango", "grapes"]
  fruits.update(more_fruits)



Exercise:
Use the remove method to remove "banana" from the fruits set.

  fruits = {"apple", "banana", "cherry"}
  fruits.remove("banana")



Exercise:
Use the discard method to remove "banana" from the fruits set.

  fruits = {"apple", "banana", "cherry"}
  fruits.discard("banana")









