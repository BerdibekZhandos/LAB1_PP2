Python Tuples
    mytuple = ("apple", "banana", "cherry")
Tuple
Tuples are used to store multiple items in a single variable.

Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.

A tuple is a collection which is ordered and unchangeable.

Tuples are written with round brackets.

Example
Create a Tuple:

thistuple = ("apple", "banana", "cherry")
print(thistuple)
Tuple Items
Tuple items are ordered, unchangeable, and allow duplicate values.

Tuple items are indexed, the first item has index [0], the second item has index [1] etc.

Ordered
When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.

Unchangeable
Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.

Allow Duplicates
Since tuples are indexed, they can have items with the same value:

  Example
  Tuples allow duplicate values:

    thistuple = ("apple", "banana", "cherry", "apple", "cherry")
    print(thistuple)
Tuple Length
To determine how many items a tuple has, use the len() function:

  Example
  Print the number of items in the tuple:
    
    thistuple = ("apple", "banana", "cherry")
    print(len(thistuple))
    Create Tuple With One Item

To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.
  Example
  One item tuple, remember the comma:

    thistuple = ("apple",)
    print(type(thistuple))

    #NOT a tuple
    thistuple = ("apple")
    print(type(thistuple))
    Tuple Items - Data Types
    Tuple items can be of any data type:

  Example
  String, int and boolean data types:
    tuple1 = ("apple", "banana", "cherry")
    tuple2 = (1, 5, 7, 9, 3)
    tuple3 = (True, False, False)
A tuple can contain different data types:  
  Example
  A tuple with strings, integers and boolean values:
      
    tuple1 = ("abc", 34, True, 40, "male")
    type()

From Python's perspective, tuples are defined as objects with the data type 'tuple':
  <class 'tuple'>
  Example
  What is the data type of a tuple?
  
    mytuple = ("apple", "banana", "cherry")
    print(type(mytuple))


Change Tuple Values
Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.
But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.

  Example
  Convert the tuple into a list to be able to change it:
    
    x = ("apple", "banana", "cherry")
    y = list(x)
    y[1] = "kiwi"
    x = tuple(y)
    print(x)

Add Items
Since tuples are immutable, they do not have a built-in append() method, but there are other ways to add items to a tuple.


1. Convert into a list: Just like the workaround for changing a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple.
  Example
  Convert the tuple into a list, add "orange", and convert it back into a tuple:

    thistuple = ("apple", "banana", "cherry")
    y = list(thistuple)
    y.append("orange")
    thistuple = tuple(y)

2. Add tuple to a tuple. You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple:
  Example
  Create a new tuple with the value "orange", and add that tuple:
      
    thistuple = ("apple", "banana", "cherry")
    y = ("orange",)
    thistuple += y
    
    print(thistuple)



Loop Through a Tuple
You can loop through the tuple items by using a for loop.

  Example
  Iterate through the items and print the values:
    
    thistuple = ("apple", "banana", "cherry")
    for x in thistuple:
      print(x)


Loop Through the Index Numbers
You can also loop through the tuple items by referring to their index number.
Use the range() and len() functions to create a suitable iterable.

  Example
  Print all items by referring to their index number:

    thistuple = ("apple", "banana", "cherry")
    for i in range(len(thistuple)):
      print(thistuple[i])


Using a While Loop
You can loop through the tuple items by using a while loop.
Use the len() function to determine the length of the tuple, then start at 0 and loop your way through the tuple items by referring to their indexes.
Remember to increase the index by 1 after each iteration.

  Example
  Print all items, using a while loop to go through all the index numbers:

    thistuple = ("apple", "banana", "cherry")
    i = 0
    while i < len(thistuple):
      print(thistuple[i])
      i = i + 1



Join Two Tuples
To join two or more tuples you can use the + operator:

  Example
  Join two tuples:

    tuple1 = ("a", "b" , "c")
    tuple2 = (1, 2, 3)
    
    tuple3 = tuple1 + tuple2
    print(tuple3)

Multiply Tuples
If you want to multiply the content of a tuple a given number of times, you can use the * operator:

  Example
  Multiply the fruits tuple by 2:
    
    fruits = ("apple", "banana", "cherry")
    mytuple = fruits * 2
    print(mytuple)


Tuple Methods
Python has two built-in methods that you can use on tuples.

Method	  Description
count()	  Returns the number of times a specified value occurs in a tuple
index()	  Searches the tuple for a specified value and returns the position of where it was found



Exercise 1:
Use the correct syntax to print the first item in the fruits tuple.

fruits = ("apple", "banana", "cherry")
print(fruits[0])


Exercise 2:
Use the correct syntax to print the number of items in the fruits tuple.

fruits = ("apple", "banana", "cherry")
print(len(fruits))


Exercise 3:
Use negative indexing to print the last item in the tuple.

fruits = ("apple", "banana", "cherry")
print(fruits[-1])


Exercise 4:
Use a range of indexes to print the third, fourth, and fifth item in the tuple.

fruits = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(fruits[2:5])












