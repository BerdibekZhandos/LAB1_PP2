Python Lists
  mylist = ["apple", "banana", "cherry"]

List
Lists are used to store multiple items in a single variable.
Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
Lists are created using square brackets:
  Example
  Create a List:
    thislist = ["apple", "banana", "cherry"]
    print(thislist)

List Items
List items are ordered, changeable, and allow duplicate values.
List items are indexed, the first item has index [0], the second item has index [1] etc.

Ordered
When we say that lists are ordered, it means that the items have a defined order, and that order will not change.
If you add new items to a list, the new items will be placed at the end of the list.
Note: There are some list methods that will change the order, but in general: the order of the items will not change.

Changeable
The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.
Allow Duplicates
Since lists are indexed, lists can have items with the same value:
  Example
  Lists allow duplicate values:
    thislist = ["apple", "banana", "cherry", "apple", "cherry"]
    print(thislist)


Append Items
To add an item to the end of the list, use the append() method:
  Example
  Using the append() method to append an item:

    thislist = ["apple", "banana", "cherry"]
    thislist.append("orange")
    print(thislist)


Insert Items
To insert a list item at a specified index, use the insert() method.
The insert() method inserts an item at the specified index:

Example
  Insert an item as the second position:
    thislist = ["apple", "banana", "cherry"]
    thislist.insert(1, "orange")
    print(thislist)


Extend List
  To append elements from another list to the current list, use the extend() method.
  Example
  Add the elements of tropical to thislist:

    thislist = ["apple", "banana", "cherry"]
    tropical = ["mango", "pineapple", "papaya"]
    thislist.extend(tropical)
    print(thislist)
The elements will be added to the end of the list.

Add Any Iterable
  The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).
  Example
  Add elements of a tuple to a list:
    thislist = ["apple", "banana", "cherry"]
    thistuple = ("kiwi", "orange")
    thislist.extend(thistuple)
    print(thislist)

Remove Specified Item
  The remove() method removes the specified item.

Example
  Remove "banana":

    thislist = ["apple", "banana", "cherry"]
    thislist.remove("banana")
    print(thislist)

If there are more than one item with the specified value, the remove() method removes the first occurance:
  Example
  Remove the first occurance of "banana":

    thislist = ["apple", "banana", "cherry", "banana", "kiwi"]
    thislist.remove("banana")
    print(thislist)

Remove Specified Index
The pop() method removes the specified index.
  Example
  Remove the second item:

    thislist = ["apple", "banana", "cherry"]
    thislist.pop(1)
    print(thislist)


Loop Through a List
You can loop through the list items by using a for loop:

Example
  Print all items in the list, one by one:

  thislist = ["apple", "banana", "cherry"]
  for x in thislist:
  print(x)

Using a While Loop
You can loop through the list items by using a while loop.
Use the len() function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes.
Remember to increase the index by 1 after each iteration.
Example
  Print all items, using a while loop to go through all the index numbers

    thislist = ["apple", "banana", "cherry"]
    i = 0
    while i < len(thislist):
      print(thislist[i])
      i = i + 1

Sort List Alphanumerically
  List objects have a sort() method that will sort the list alphanumerically, ascending, by default:

  Example
  Sort the list alphabetically:
    
    thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
    thislist.sort()
    print(thislist)

  Example
  Sort the list numerically:

    thislist = [100, 50, 65, 82, 23]
    thislist.sort()
    print(thislist)

Sort Descending
  To sort descending, use the keyword argument reverse = True:
  Example
  Sort the list descending:
    
    thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
    thislist.sort(reverse = True)
    print(thislist)

Copy a List
You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.

There are ways to make a copy, one way is to use the built-in List method copy().

Example
Make a copy of a list with the copy() method:

thislist = ["apple", "banana", "cherry"]
mylist = thislist.copy()
print(mylist)
Another way to make a copy is to use the built-in method list().

Example
Make a copy of a list with the list() method:

thislist = ["apple", "banana", "cherry"]
mylist = list(thislist)
print(mylist)


Join Two Lists
There are several ways to join, or concatenate, two or more lists in Python.

One of the easiest ways are by using the + operator.

Example
Join two list:

list1 = ["a", "b", "c"]
list2 = [1, 2, 3]

list3 = list1 + list2
print(list3)

Python - List Methods
List Methods
Python has a set of built-in methods that you can use on lists.

Method	                    Description
append()	                  Adds an element at the end of the list
clear()	                    Removes all the elements from the list
copy()	                    Returns a copy of the list
count()	                    Returns the number of elements with the specified value
extend()	                  Add the elements of a list (or any iterable), to the end of the current list
index()	                    Returns the index of the first element with the specified value
insert()	                  Adds an element at the specified position
pop()	                      Removes the element at the specified position
remove()	                  Removes the item with the specified value
reverse()	                  Reverses the order of the list
sort()	                    Sorts the list




Exercise 1:
Print the second item in the fruits list.

fruits = ["apple", "banana", "cherry"]
print(fruits[1])


Exercise 2:
Change the value from "apple" to "kiwi", in the fruits list.

fruits = ["apple", "banana", "cherry"]
fruits[0] = "kiwi"


Exercise 3:
Use the append method to add "orange" to the fruits list.

fruits = ["apple", "banana", "cherry"]
fruits.append("orange")


Exercise 4:
Use the insert method to add "lemon" as the second item in the fruits list.

fruits = ["apple", "banana", "cherry"]
fruits.insert(1, "lemon")


Exercise 5:
Use the remove method to remove "banana" from the fruits list.

fruits = ["apple", "banana", "cherry"]
fruits.remove("banana")


Exercise 6:
Use negative indexing to print the last item in the list.

fruits = ["apple", "banana", "cherry"]
print(fruits[-1])


Exercise 7:
Use a range of indexes to print the third, fourth, and fifth item in the list.

fruits = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(fruits[2:5])


Exercise 8:
Use the correct syntax to print the number of items in the list.

fruits = ["apple", "banana", "cherry"]
print(len(fruits))
